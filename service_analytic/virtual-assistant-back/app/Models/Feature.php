<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Builder;

/**
 * Class Feature
 * Характеристика
 *
 * @package App\Models
 * @property integer $id
 * @property string $name
 * @property integer $external_id id характеристики в ozon
 * @property integer $is_reference справочник
 * @property integer $count_values кол-во значений справочника
 * @property integer $old_count_values старое кол-во значений справочника
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property integer $is_specialty особенность
 * @property integer $is_collection коллекция
 * @property integer $is_required
 * @property string|null $description
 * @property string $type
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\OzCategory[] $categories
 * @property-read int|null $categories_count
 * @property-read int|null $options_values_count
 * @method static \Illuminate\Database\Eloquent\Builder|Feature newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Feature newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Feature query()
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereCountValues($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereExternalId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereIsCollection($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereIsReference($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereIsRequired($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereIsSpecialty($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereOldCountValues($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Feature whereUpdatedAt($value)
 * @mixin Model
 */
class Feature extends Model
{
    const UNIQUE_FOR_CATEGORIES_FEATURE_IDS = [
        8229
    ];

    const BRAND_ID = 85;

    const UNIQUE_FOR_CUSTOM_CATEGORIES_FEATURE_IDS = [
        85 => [
            15621042,
            17027482,
            17027484,
            17027487,
            17027488,
            17027490,
            17027491,
            17027492,
            17027493,
            17027494,
            17027495,
            17027496,
            17027922,
            17027923,
            17027926,
            17027928,
            17028608,
            17028614,
            17028629,
            17028633,
            17028637,
            17028639,
            17028644,
            17028646,
            17028653,
            17028660,
            17028665,
            17028698,
            17028700,
            17028714,
            17028730,
            17028732,
            17028744,
            17028750,
            17028759,
            17028762,
            17028763,
            17028773,
            17028912,
            17028914,
            17028921,
            17028930,
            17028935,
            17028936,
            17028937,
            17028939,
            17028955,
            17028956,
            17028976,
            17028987,
            17028993,
            17028996,
            17028997,
            17029001,
            17029011,
            17029022,
            17029152,
            17029182,
            17029183,
            17029205,
            17029407,
            17029500,
            17029528,
            17029529,
            17029536,
            17029548,
            17029551,
            17029553,
            17029715,
            17029718,
            17029749,
            17029889,
            17029936,
            17029942,
            17030346,
            17030348,
            17030374,
            17030382,
            17030446,
            17030452,
            17030465,
            17030469,
            17030472,
            17030609,
            17030611,
            17030616,
            17030636,
            17030644,
            17030786,
            17030809,
            17030816,
            17030826,
            17030830,
            17030835,
            17030836,
            17031182,
            17031187,
            17031220,
            17031223,
            17031386,
            17031395,
            17031397,
            17031407,
            17031421,
            17031430,
            17031431,
            17031681,
            17032033,
            17032039,
            17032144,
            17032186,
            17032207,
            17032222,
            17032224,
            17032231,
            17032235,
            17032237,
            17032239,
            17032240,
            17032299,
            17032303,
            17032409,
            17032417,
            17032420,
            17032557,
            17032596,
            17032601,
            17032648,
            17032687,
            17032696,
            17033108,
            17033111,
            17033112,
            17033114,
            17033368,
            17033374,
            17033381,
            17033398,
            17033413,
            17033415,
            17033457,
            17033482,
            17033680,
            17033682,
            17033683,
            17033811,
            17033835,
            17033850,
            17033858,
            17033865,
            17033868,
            17034002,
            17034034,
            17034354,
            17034385,
            17034396,
            17034408,
            17034462,
            17034523,
            17034548,
            17034550,
            17034556,
            17034557,
            17034587,
            17035094,
            17035116,
            17035118,
            17035192,
            17035204,
            17035374,
            17035436,
            17035440,
            17035488,
            17035531,
            17035726,
            17035743,
            17035773,
            17036022,
            17036111,
            17036122,
            17036126,
            17036134,
            17036145,
            17036185,
            17036191,
            17036209,
            17036221,
            17036222,
            17036585,
            17036600,
            17036607,
            17036610,
            17036638,
            17036688,
            17036869,
            17036999,
            17037000,
            17037009,
            17037082,
            17037092,
            17037099,
            17037628,
            17037635,
            17037683,
            17037691,
            17038059,
            17038063,
            17038106,
            17038136,
            17038138,
            17038167,
            17038201,
            17038312,
            17038323,
            17038325,
            17038502,
            17038647,
            17038808,
            17038848,
            17038852,
            17038972,
            17038978,
            17038992,
            17039008,
            17039012,
            17039029,
            17039030,
            17039071,
            17039085,
            17039232,
            17039622,
            17039623,
            17039629,
            17039640,
            17154182,
            17865409,
            22824704,
            22824850,
            22825029,
            22825047,
            22825063,
            22825074,
            22825083,
            22825085,
            22825092,
            22825157,
            22825170,
            22825306,
            22825358,
            22825795,
            22826979,
            24026731,
            24026745,
            24027479,
            24168949,
            25656229,
            25663188,
            27137306,
            27332699,
            27332741,
            27428422,
            28946879,
            29299333,
            29299337,
            29616246,
            29907317,
            32450974,
            32451063,
            32451077,
            32451079,
            32451081,
            32451087,
            32451090,
            32451125,
            32451138,
            32451143,
            32451166,
            32451170,
            34106301,
            34231651,
            34772379,
            35853052,
            35915195,
            36089911,
            39454729,
            39454858,
            39454859,
            39455158,
            39490890,
            40688537,
            43535272,
            44412585,
            44889988,
            45365372,
            45365513,
            45365603,
            45365630,
            45371247,
            45393037,
            45393051,
            45393062,
            45393072,
            45627938,
            45628127,
            45744355,
            45746184,
            46174789,
            47202547,
            47579342,
            48552958,
            48953774,
            50765804,
            51592635,
            52265716,
            52620255,
            52659818,
            52663384,
            52663495,
            52669960,
            52670126,
            52852738,
            55022134,
            55462781,
            56253863,
            56322589,
            56727951,
            57186849,
            58396222,
            59949523,
            62226205,
            63349381,
            64766017,
            70603994,
            71716476,
            71721114,
            71768662,
            71770129,
            71770133,
            72078171,
            72717772,
            73033274,
            73078625,
            73078732,
            73634390,
            74088071,
            74382588,
            74752517,
            74753214,
            74753567,
            74770544,
            75028262,
            75028447,
            76902590,
            76967139,
            77011122,
            77085763,
            77650645,
            77699896,
            77712555,
            77712701,
            77759699,
            77932306,
            78059088,
            78061772,
            78072212,
            78263841,
            78280192,
            78284219,
            78297625,
            78407099,
            78693346,
            78731083,
            79022162,
            79164512,
            79224106,
            79361592,
            79362588,
            79557674,
            79557906,
            80048137,
            80463729,
            80475783,
            80715346,
            80722989,
            80771432,
            81044484,
            81070922,
            81074701,
            81074835,
            81208241,
            81209237,
            81722281,
            81865080,
            83296709,
            83736422,
            83747266,
            84251209,
            84460413,
            84460475,
            84806098,
            84834420,
            84941659,
            85424000,
            85819541,
            85845265,
            85878501,
            85970371,
            86029514,
            86116519,
            86133380,
            86291469,
            86292455,
            86440209,
            86473322,
            86474732,
            86491405,
            86491609,
            86610863,
            86636801,
            86697255,
            86697292,
            86727623,
            86779748,
            86840937,
            87004915,
            87180531,
            87186260,
            87311444,
            87716805,
            87768309,
            87881625,
            87900141,
            87964768,
            88092497,
            88096623,
            88299285,
            88486557,
            88713358,
            88715741,
            88780434,
            88922513,
            88942427,
            88976462,
            89115219,
            89202024,
            89225610,
            89227124,
            89238805,
            89245966,
            89252249,
            89261454,
            89268965,
            89272321,
            89280847,
            89282819,
            89284503,
            89299562,
            89311894,
            89360548,
            89360558,
            89380248,
            89454561,
            89536377,
            89706946,
            89740642,
            89810439,
            89810610,
            89901580,
            89901583,
            89907278,
            90310015,
            90770269,
            90991385,
            91299510,
            91451947,
            91452040,
            92121881,
            92233384,
            92269011,
            92376744,
            92385340,
            92451029,
            92451036,
            92498177,
            93105777,
            93169568,
            93191001,
            93233126,
            93574560,
            94108429,
            94658778,
            94663641,
            95605407,
            95729722,
            98316986,
            99199718,
            99550815,
            99550816,
            99829775,
            99848436,
            100427504,
            100614131,
            100614133,
            101079061,
            101144614,
            101493835,
            1000001840,
            1000001844,
            1000001946,
            1000001947,
            1000002127,
            1000002149,
            1000002205,
            1000002467,
            1000002578
        ]
    ];

    protected $table = 'oz_features';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'id',
        'category_id',
        'is_reference',
        'count_values',
        'old_count_values',
        'is_specialty',
        'is_collection',
        'is_required',
        'description',
        'type'
    ];

    /**
     * Категории
     *
     * @return BelongsToMany
     */
    public function categories(): BelongsToMany
    {
        return $this->belongsToMany(OzCategory::class, 'oz_category_to_feature', 'feature_id', 'category_id');
    }

    /**
     * Relation options
     *
     * @return BelongsToMany
     */
    public function options($categoryId = null)
    {
        $uniqueFeatures = self::UNIQUE_FOR_CATEGORIES_FEATURE_IDS;

        if (empty($categoryId) || !in_array($this->id, $uniqueFeatures)) {
            return $this->belongsToMany(Option::class, 'oz_feature_to_option', 'feature_id', 'option_id')
                ->whereNull('oz_feature_to_option.category_id');
        }

        return $this->belongsToMany(Option::class, 'oz_feature_to_option', 'feature_id', 'option_id')
            ->where('oz_feature_to_option.category_id', '=', $categoryId);
    }

    public function latestTenOptions($categoryId = null)
    {
        return $this->options($categoryId)->orderBy('popularity', 'desc')->take(10)->get();
    }
}
